%CMF
# %PSECTS Section
# For each object file, details of its psects are enumerated here.
# The begining of the section is indicated by %PSECTS.  The first
# line indicates the name of the first object file, e.g.
#    $foo.obj
# Each line that follows describes a psect in that object file, until
# the next object file.  The lines that describe a psect have the
# format:
#    <psect name> <class name> <space> <link address> <load addresses> <length> <delta> <reloc>
# All addresses and the length are given in unqualified hexadecimal
# in delta units.  Any other numeric values are decimal.
%PSECTS
$transmitter.obj
cinit CODE 0 802 802 26 1 2
text0 CODE 0 834 834 2 1 2
idataCOMRAM CODE 0 828 828 C 1 1
smallconst SMALLCONST 0 800 800 2 1 2
dataCOMRAM COMRAM 1 1 1 C 1 1
config CONFIG 4 300000 300000 8 1 1
$startup.obj
init CODE 0 0 0 4 1 2
config CONFIG 4 300000 300000 8 1 1
# %UNUSED Section
# This section enumerates the unused ranges of each CLASS. Each entry
# is described on a single line as follows:
#    <class name> <range> <delta>
# Addresses given in the range are in hexadecimal and units of delta.
%UNUSED
RAM 60-7FF 1
SFR F60-FFF 1
BANK0 60-FF 1
BANK1 100-1FF 1
BANK2 200-2FF 1
BANK3 300-3FF 1
BANK4 400-4FF 1
BANK5 500-5FF 1
BANK6 600-6FF 1
BANK7 700-7FF 1
CONST 4-7FF 1
CONST 836-7FFF 1
IDLOC 200000-200007 1
SMALLCONST 836-7FFF 1
CODE 4-7FF 1
CODE 836-7FFF 1
BIGRAM D-7FF 1
BIGSFR F60-FFF 1
COMRAM D-5F 1
CONFIG 300008-30000D 1
EEDATA F00000-F000FF 1
MEDIUMCONST 836-7FFF 1
# %LINETAB Section
# This section enumerates the file/line to address mappings.
# The beginning of the section is indicated by %LINETAB.
# The first line indicates the name of the first object file, e.g.
#   $foo.obj
# Each line that follows describes a single mapping until the next
# object file.  Mappings have the following format:
#    <address> <psect name> <class name> ><line number>:<file name>
# The address is absolute and given given in unqualified hex 
# in delta units of the psect. All mappings within an object file
# are in ascending order of addresses.
# All other numeric values are in decimal.
%LINETAB
$transmitter.obj
834 text0 CODE >34:/home/lucas/PIC/C/OpticalCommunicatorV0/transmitter.c
834 text0 CODE >39:/home/lucas/PIC/C/OpticalCommunicatorV0/transmitter.c
802 cinit CODE >471:/home/lucas/PIC/C/OpticalCommunicatorV0/transmitter.as
802 cinit CODE >473:/home/lucas/PIC/C/OpticalCommunicatorV0/transmitter.as
802 cinit CODE >476:/home/lucas/PIC/C/OpticalCommunicatorV0/transmitter.as
802 cinit CODE >499:/home/lucas/PIC/C/OpticalCommunicatorV0/transmitter.as
804 cinit CODE >500:/home/lucas/PIC/C/OpticalCommunicatorV0/transmitter.as
806 cinit CODE >501:/home/lucas/PIC/C/OpticalCommunicatorV0/transmitter.as
808 cinit CODE >502:/home/lucas/PIC/C/OpticalCommunicatorV0/transmitter.as
80A cinit CODE >503:/home/lucas/PIC/C/OpticalCommunicatorV0/transmitter.as
80C cinit CODE >504:/home/lucas/PIC/C/OpticalCommunicatorV0/transmitter.as
80E cinit CODE >505:/home/lucas/PIC/C/OpticalCommunicatorV0/transmitter.as
812 cinit CODE >506:/home/lucas/PIC/C/OpticalCommunicatorV0/transmitter.as
816 cinit CODE >507:/home/lucas/PIC/C/OpticalCommunicatorV0/transmitter.as
816 cinit CODE >508:/home/lucas/PIC/C/OpticalCommunicatorV0/transmitter.as
818 cinit CODE >509:/home/lucas/PIC/C/OpticalCommunicatorV0/transmitter.as
81C cinit CODE >510:/home/lucas/PIC/C/OpticalCommunicatorV0/transmitter.as
81E cinit CODE >511:/home/lucas/PIC/C/OpticalCommunicatorV0/transmitter.as
820 cinit CODE >512:/home/lucas/PIC/C/OpticalCommunicatorV0/transmitter.as
822 cinit CODE >518:/home/lucas/PIC/C/OpticalCommunicatorV0/transmitter.as
822 cinit CODE >520:/home/lucas/PIC/C/OpticalCommunicatorV0/transmitter.as
824 cinit CODE >521:/home/lucas/PIC/C/OpticalCommunicatorV0/transmitter.as
$startup.obj
0 init CODE >102:/home/lucas/PIC/C/OpticalCommunicatorV0/startup.as
# %SYMTAB Section
# An enumeration of all symbols in the program.
# The beginning of the section is indicated by %SYMTAB.
# Each line describes a single symbol as follows:
#    <label> <value> [-]<load-adj> <class> <space> <psect> <file-name>
# The value and load-adj are both in unqualified hexadecimal.
# All other numeric values are in decimal.  The load-adj is the
# quantity one needs to add to the symbol value in order to obtain the load
# address of the symbol.  This value may be signed. If the symbol
# was defined in a psect then <psect> will be "-". File-name
# is the name of the object file in which the symbol was defined.
%SYMTAB
__Lmediumconst 0 0 MEDIUMCONST 0 mediumconst transmitter.obj
__Hspace_0 836 0 ABS 0 - transmitter.obj
__Hspace_1 D 0 ABS 0 - transmitter.obj
__Hspace_2 0 0 ABS 0 - transmitter.obj
__Hspace_4 600008 0 ABS 0 - transmitter.obj
__Hibigdata 0 0 CODE 0 ibigdata transmitter.obj
__mediumconst 0 0 MEDIUMCONST 0 mediumconst startup.obj
__Heeprom_data 0 0 EEDATA 0 eeprom_data transmitter.obj
__L__absolute__ 0 0 ABS 0 __absolute__ transmitter.obj
__Lsmallconst 800 0 SMALLCONST 0 smallconst transmitter.obj
___sp 0 0 STACK 2 stack startup.obj
_main 834 0 CODE 0 text0 transmitter.obj
___stack_hi 0 0 STACK 2 stack startup.obj
___stack_lo 0 0 STACK 2 stack startup.obj
start 0 0 CODE 0 init startup.obj
__Hpowerup 0 0 CODE 0 powerup transmitter.obj
__HdataCOMRAM 0 0 ABS 0 dataCOMRAM transmitter.obj
__accesstop 60 0 ABS 0 - startup.obj
intlevel0 0 0 CODE 0 text startup.obj
intlevel1 0 0 CODE 0 text startup.obj
intlevel2 0 0 CODE 0 text startup.obj
intlevel3 0 0 CODE 0 text startup.obj
__LnvFARRAM 0 0 FARRAM 0 nvFARRAM transmitter.obj
__Hifardata 0 0 CODE 0 ifardata transmitter.obj
__Hclrtext 0 0 ABS 0 clrtext transmitter.obj
__pidataCOMRAM 828 0 CODE 0 idataCOMRAM transmitter.obj
___inthi_sp 0 0 STACK 2 stack startup.obj
___intlo_sp 0 0 STACK 2 stack startup.obj
__LdataCOMRAM 0 0 ABS 0 dataCOMRAM transmitter.obj
__Hintcode_body 0 0 ABS 0 intcode_body transmitter.obj
__Lintsave_regs 0 0 BIGRAM 1 intsave_regs transmitter.obj
__Hmediumconst 0 0 MEDIUMCONST 0 mediumconst transmitter.obj
__Hintcodelo 0 0 CODE 0 intcodelo transmitter.obj
__LidataCOMRAM 0 0 ABS 0 idataCOMRAM transmitter.obj
__Lintcodelo 0 0 CODE 0 intcodelo transmitter.obj
start_initialization 802 0 CODE 0 cinit transmitter.obj
__HnvFARRAM 0 0 FARRAM 0 nvFARRAM transmitter.obj
___rparam_used 1 0 ABS 0 - transmitter.obj
isa$xinst 0 0 ABS 0 - startup.obj
__Hbank0 0 0 ABS 0 bank0 transmitter.obj
__Hbank1 0 0 ABS 0 bank1 transmitter.obj
__Hbank2 0 0 ABS 0 bank2 transmitter.obj
__Hbank3 0 0 ABS 0 bank3 transmitter.obj
__Hbank4 0 0 ABS 0 bank4 transmitter.obj
__Hbank5 0 0 ABS 0 bank5 transmitter.obj
__Hbank6 0 0 ABS 0 bank6 transmitter.obj
__Hbank7 0 0 ABS 0 bank7 transmitter.obj
__Hcinit 0 0 ABS 0 cinit transmitter.obj
__Hconst 0 0 CONST 0 const transmitter.obj
__Hidata 0 0 CODE 0 idata transmitter.obj
__Hidloc 0 0 ABS 0 idloc transmitter.obj
__Hnvbit 0 0 COMRAM 1 nvbit transmitter.obj
__Hparam 0 0 COMRAM 1 rparam transmitter.obj
__Hrdata 0 0 COMRAM 1 rdata transmitter.obj
__Hstack 0 0 STACK 2 stack transmitter.obj
__Htext0 0 0 ABS 0 text0 transmitter.obj
__Hbigbss 0 0 BIGRAM 1 bigbss transmitter.obj
__Hbigram 0 0 ABS 0 bigram transmitter.obj
__Hbigsfr 0 0 ABS 0 bigsfr transmitter.obj
__smallconst 800 0 SMALLCONST 0 smallconst startup.obj
__Hcomram 0 0 ABS 0 comram transmitter.obj
__Hconfig 300008 0 CONFIG 4 config transmitter.obj
__Lbank0 0 0 ABS 0 bank0 transmitter.obj
__Lbank1 0 0 ABS 0 bank1 transmitter.obj
__Lbank2 0 0 ABS 0 bank2 transmitter.obj
__Lbank3 0 0 ABS 0 bank3 transmitter.obj
__Lbank4 0 0 ABS 0 bank4 transmitter.obj
__Lbank5 0 0 ABS 0 bank5 transmitter.obj
__Lbank6 0 0 ABS 0 bank6 transmitter.obj
__Lbank7 0 0 ABS 0 bank7 transmitter.obj
__Lcinit 0 0 ABS 0 cinit transmitter.obj
__Lconst 0 0 CONST 0 const transmitter.obj
__Lidata 0 0 CODE 0 idata transmitter.obj
__Lidloc 0 0 ABS 0 idloc transmitter.obj
__Lnvbit 0 0 COMRAM 1 nvbit transmitter.obj
__Lparam 0 0 COMRAM 1 rparam transmitter.obj
__Lrdata 0 0 COMRAM 1 rdata transmitter.obj
__Lstack 0 0 STACK 2 stack transmitter.obj
__Ltext0 0 0 ABS 0 text0 transmitter.obj
__Hfarbss 0 0 FARRAM 0 farbss transmitter.obj
__Lintcode_body 0 0 ABS 0 intcode_body transmitter.obj
__Habs1 0 0 ABS 0 abs1 transmitter.obj
__Hdata 0 0 ABS 0 data transmitter.obj
__Hheap 0 0 HEAP 7 heap transmitter.obj
__Hinit 4 0 CODE 0 init transmitter.obj
__Hrbit 0 0 COMRAM 1 rbit transmitter.obj
__Hrbss 0 0 COMRAM 1 rbss transmitter.obj
__Htemp 0 0 COMRAM 1 temp transmitter.obj
__Htext 0 0 ABS 0 text transmitter.obj
__Labs1 0 0 ABS 0 abs1 transmitter.obj
__Ldata 0 0 ABS 0 data transmitter.obj
__Lheap 0 0 HEAP 7 heap transmitter.obj
__Linit 0 0 CODE 0 init transmitter.obj
__Lrbit 0 0 COMRAM 1 rbit transmitter.obj
__Lrbss 0 0 COMRAM 1 rbss transmitter.obj
__Ltemp 0 0 COMRAM 1 temp transmitter.obj
__Ltext 0 0 ABS 0 text transmitter.obj
__HcstackCOMRAM 0 0 ABS 0 cstackCOMRAM transmitter.obj
__Hintret 0 0 ABS 0 intret transmitter.obj
__Hirdata 0 0 CODE 0 irdata transmitter.obj
__S0 836 0 ABS 0 - transmitter.obj
__S1 D 0 ABS 0 - transmitter.obj
__S4 0 0 ABS 0 - transmitter.obj
__S5 0 0 ABS 0 - transmitter.obj
__HidataCOMRAM 0 0 ABS 0 idataCOMRAM transmitter.obj
__Lbigdata 0 0 BIGRAM 1 bigdata transmitter.obj
__Hnvrram 0 0 COMRAM 1 nvrram transmitter.obj
__Lintentry 0 0 ABS 0 intentry transmitter.obj
__Hramtop 800 0 RAM 0 ramtop transmitter.obj
__Hrparam 0 0 COMRAM 1 rparam transmitter.obj
__activetblptr 0 0 ABS 0 - transmitter.obj
__Hstruct 0 0 COMRAM 1 struct transmitter.obj
__Lbigbss 0 0 BIGRAM 1 bigbss transmitter.obj
__Lbigram 0 0 ABS 0 bigram transmitter.obj
__Lbigsfr 0 0 ABS 0 bigsfr transmitter.obj
__Lcomram 0 0 ABS 0 comram transmitter.obj
__Lconfig 0 0 CONFIG 4 config transmitter.obj
__Lfarbss 0 0 FARRAM 0 farbss transmitter.obj
___inthi_stack_hi 0 0 STACK 2 stack startup.obj
___inthi_stack_lo 0 0 STACK 2 stack startup.obj
__Lfardata 0 0 FARRAM 0 fardata transmitter.obj
isa$std 1 0 ABS 0 - startup.obj
stackhi 0 0 ABS 0 - startup.obj
stacklo 0 0 ABS 0 - startup.obj
__Lintcode 0 0 CODE 0 intcode transmitter.obj
__Lintret 0 0 ABS 0 intret transmitter.obj
__Lirdata 0 0 CODE 0 irdata transmitter.obj
__Lspace_0 0 0 ABS 0 - transmitter.obj
__Lspace_1 0 0 ABS 0 - transmitter.obj
__Lspace_2 0 0 ABS 0 - transmitter.obj
__Lspace_4 0 0 ABS 0 - transmitter.obj
__LcstackCOMRAM 0 0 ABS 0 cstackCOMRAM transmitter.obj
end_of_initialization 822 0 CODE 0 cinit transmitter.obj
__Lnvrram 0 0 COMRAM 1 nvrram transmitter.obj
__Hintentry 0 0 ABS 0 intentry transmitter.obj
__Hreset_vec 0 0 CODE 0 reset_vec transmitter.obj
__Lramtop 800 0 RAM 0 ramtop transmitter.obj
__Lrparam 0 0 COMRAM 1 rparam transmitter.obj
__pcinit 802 0 CODE 0 cinit transmitter.obj
__ptext0 834 0 CODE 0 text0 transmitter.obj
__Lstruct 0 0 COMRAM 1 struct transmitter.obj
_guardRail C 0 COMRAM 1 dataCOMRAM transmitter.obj
__ramtop 800 0 RAM 0 ramtop startup.obj
__Lpowerup 0 0 CODE 0 powerup transmitter.obj
__Leeprom_data 0 0 EEDATA 0 eeprom_data transmitter.obj
__H__absolute__ 0 0 ABS 0 __absolute__ transmitter.obj
__psmallconst 800 0 SMALLCONST 0 smallconst transmitter.obj
__Lreset_vec 0 0 CODE 0 reset_vec transmitter.obj
___heap_hi 0 0 ABS 0 - startup.obj
___heap_lo 0 0 ABS 0 - startup.obj
___param_bank 0 0 ABS 0 - transmitter.obj
___intlo_stack_hi 0 0 STACK 2 stack startup.obj
___intlo_stack_lo 0 0 STACK 2 stack startup.obj
__Hbigdata 0 0 BIGRAM 1 bigdata transmitter.obj
__end_of__initialization 822 0 CODE 0 cinit transmitter.obj
__Libigdata 0 0 CODE 0 ibigdata transmitter.obj
__Lclrtext 0 0 ABS 0 clrtext transmitter.obj
__pcstackCOMRAM 0 0 COMRAM 1 cstackCOMRAM transmitter.obj
_message 1 0 COMRAM 1 dataCOMRAM transmitter.obj
__end_of_main 836 0 CODE 0 text0 transmitter.obj
__HRAM 0 0 ABS 0 - transmitter.obj
__Hbss 0 0 RAM 1 bss transmitter.obj
__Hram 0 0 ABS 0 ram transmitter.obj
__Hsfr 0 0 ABS 0 sfr transmitter.obj
__LRAM 1 0 ABS 0 - transmitter.obj
__Lbss 0 0 RAM 1 bss transmitter.obj
__Lram 0 0 ABS 0 ram transmitter.obj
__Lsfr 0 0 ABS 0 sfr transmitter.obj
__initialization 802 0 CODE 0 cinit transmitter.obj
__pdataCOMRAM 1 0 COMRAM 1 dataCOMRAM transmitter.obj
__Hfardata 0 0 FARRAM 0 fardata transmitter.obj
__Hsmallconst 802 0 SMALLCONST 0 smallconst transmitter.obj
__Lifardata 0 0 CODE 0 ifardata transmitter.obj
__Hintsave_regs 0 0 BIGRAM 1 intsave_regs transmitter.obj
__Hintcode 0 0 CODE 0 intcode transmitter.obj
# %SPLITSTAB Section
# This section enumerates all the psect splits performed by the assembler.
# The beginning of the section is indicated by %SPLITSTAB.
# Each line is a record a particular split, where the parent psect is on
# the left and the child on the right.  Note that a child psect is always
# split form the top of the parent psect. All splits from a given parent
# are listed in the order in which they occurred.
%SPLITSTAB
# %DABS Section
# This section contains a table of all usuage of the assember
# directive DABS in the program. Each line has the following format:
#   <name> <space> <address> <size>
# If the DABS was originally labelled then that shall be <name>,
# otherwise name will be "-".  The <space> number is in decimal.
# <address> and <size> are in byte units as unqaulified hexadecimal
%DABS
# %SEGMENTS Section
# This sections enumerates the segments of the program.  Each segment
# is described on a single line as follows:
#    <name> <space> <link address> <file address> <size> <delta>
# Addresses and size are in unqualified hexadecimal.  The link address
# and size are in units of delta. The file address is in units of bytes.
# All other numeric quantities are in decimal.
%SEGMENTS
cinit 0 802 802 34 1
reset_vec 0 0 0 4 1
smallconst 0 800 800 2 1
dataCOMRAM 1 1 1 C 1
# %NOTES Section
# This section contains data of all the note-psects.  The beginning of the section
# is indicated by %NOTES. The first line indicates the name and decimal
# byte-length of the first note-psect, e.g.
#   $codecov_info_hdr 16
# Each line that follows contains the byte-data of the psect in hexadecimal as a
# space-separated list. These lines are limited to 16 bytes of data.
%NOTES
